# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_align')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_align')
    _align = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_align', [dirname(__file__)])
        except ImportError:
            import _align
            return _align
        try:
            _mod = imp.load_module('_align', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _align = swig_import_helper()
    del swig_import_helper
else:
    import _align
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class double_p(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_p, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_p, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _align.new_double_p()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _align.delete_double_p
    __del__ = lambda self: None

    def assign(self, value):
        return _align.double_p_assign(self, value)

    def value(self):
        return _align.double_p_value(self)

    def cast(self):
        return _align.double_p_cast(self)
    if _newclass:
        frompointer = staticmethod(_align.double_p_frompointer)
    else:
        frompointer = _align.double_p_frompointer
double_p_swigregister = _align.double_p_swigregister
double_p_swigregister(double_p)

def double_p_frompointer(t):
    return _align.double_p_frompointer(t)
double_p_frompointer = _align.double_p_frompointer

class double_array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, double_array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, double_array, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _align.new_double_array(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _align.delete_double_array
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _align.double_array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _align.double_array___setitem__(self, index, value)

    def cast(self):
        return _align.double_array_cast(self)
    if _newclass:
        frompointer = staticmethod(_align.double_array_frompointer)
    else:
        frompointer = _align.double_array_frompointer
double_array_swigregister = _align.double_array_swigregister
double_array_swigregister(double_array)

def double_array_frompointer(t):
    return _align.double_array_frompointer(t)
double_array_frompointer = _align.double_array_frompointer


def mexFunction(arg_count, arg_alignment_trace, arg_bad_levels, arg_cumulate_score, arg_alignment_matrix, arg_score_matrix, arg_num_rows, arg_num_cols, arg_step_type_penalties, arg_modes, arg_num_modes, arg_lookback, arg_alignment_type, arg_slip_location, arg_use_periodic_boundaries):
    return _align.mexFunction(arg_count, arg_alignment_trace, arg_bad_levels, arg_cumulate_score, arg_alignment_matrix, arg_score_matrix, arg_num_rows, arg_num_cols, arg_step_type_penalties, arg_modes, arg_num_modes, arg_lookback, arg_alignment_type, arg_slip_location, arg_use_periodic_boundaries)
mexFunction = _align.mexFunction

def mod(a, b):
    return _align.mod(a, b)
mod = _align.mod

def align(score_matrix, num_rows, num_cols, step_penalties, bad_penalties, slip_penalties, modes, num_modes, lookback, slip_locations, use_periodic_boundaries, alignment_trace, cumulate_score, level_is_bad, alignment_matrix, num_step_penalties_per_row):
    return _align.align(score_matrix, num_rows, num_cols, step_penalties, bad_penalties, slip_penalties, modes, num_modes, lookback, slip_locations, use_periodic_boundaries, alignment_trace, cumulate_score, level_is_bad, alignment_matrix, num_step_penalties_per_row)
align = _align.align

def selfAlign(score_matrix, num_rows, num_cols, step_penalties, SA_penalty, alignment_trace, cumulate_score, alignment_matrix, num_step_penalties_per_row):
    return _align.selfAlign(score_matrix, num_rows, num_cols, step_penalties, SA_penalty, alignment_trace, cumulate_score, alignment_matrix, num_step_penalties_per_row)
selfAlign = _align.selfAlign

def ret():
    return _align.ret()
ret = _align.ret
# This file is compatible with both classic and new-style classes.


